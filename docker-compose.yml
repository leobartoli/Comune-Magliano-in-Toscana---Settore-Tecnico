services:

# =================================================================
# INTELLIGENZA ARTIFICIALE E INTERAZIONE
# =================================================================

  # Cervello AI - Ollama (Rimosso il supporto GPU per risolvere l'errore WSL/Nvidia)
  cervello-analitico:
    image: ollama/ollama:latest
    container_name: cervello_comune
    restart: always
    env_file:
      - .env
    # --- RIMOZIONE CONFIGURAZIONE GPU ---
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    # runtime: nvidia 
    # ------------------------------------
    volumes:
      - dati_ai_municipio:/root/.ollama
    ports:
      - "11434:11434"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rete_municipio

# Server di Contesto (Model Context Protocol - MCP)
  server-context-mcp:
    # ⚠️ SOSTITUISCI 'image:' CON 'build:'
    # image: python:3.11-slim  # Rimosso
    build:
      context: ./context_mcp   # Il percorso della cartella che contiene il Dockerfile
      dockerfile: Dockerfile
      
    container_name: server_contesto_mcp
    restart: always
    env_file:
      - .env
    volumes:
      - ./context_mcp:/app
    working_dir: /app
    command: python3 server.py 
    environment:
      DATABASE_URL: ${DATABASE_URL} 
      PORT: ${MCP_API_PORT}
    ports:
      - "${MCP_API_PORT}:${MCP_API_PORT}"
    networks:
      - rete_municipio
    depends_on:
      - database-patrimonio
      - cervello-analitico

  # Sintesi Vocale Italiana (TTS - Corretto il comando)
  sintesi-vocale-avvisi:
    image: rhasspy/wyoming-piper:latest 
    container_name: voce_avvisi
    restart: always
    env_file:
      - .env
    # COMANDO CORRETTO: Usa solo l'argomento --voice
    command: --voice ${PIPER_VOICE}
    ports:
      # Porta di comunicazione Wyoming (10200) mappata su 10201
      - "10201:10200"
      - "5001:5000"    # ⭐ AGGIUNGI QUESTA RIGA per API Flask
    networks:
      - rete_municipio

  # Riconoscimento Vocale Italiano (STT - Wyoming Whisper) ⭐ MODIFICATO: Modello impostato su 'small'
  riconoscimento-vocale-stt:
    image: rhasspy/wyoming-whisper:latest
    container_name: voce_riconoscimento
    restart: always
    env_file:
      - .env
    # Modello specificato direttamente: 'small' offre un buon equilibrio
    command: --model small --language it 
    volumes:
      # Volume per la cache dei modelli scaricati
      - dati_stt_cache:/data
      - ./audio_per_test:/audio 
    ports:
      # Porta di comunicazione Wyoming (10300)
      - "10300:10300" 
    networks:
      - rete_municipio

# =================================================================
# AUTOMAZIONE E MONITORAGGIO INFRASTRUTTURE
# =================================================================

  # Home Assistant - Piattaforma di integrazione IoT/BMS
  piattaforma-iot:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: gestione_edifici
    restart: always
    env_file:
      - .env
    privileged: true
    volumes:
      - dati_piattaforma:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    ports:
      - "8123:8123"
    networks:
      - rete_municipio
    environment:
      - TZ=${TZ}

  # Automazioni e Flussi di Lavoro (n8n)
  flussi-manutenzione:
    image: n8nio/n8n:latest
    container_name: automazioni_municipio
    restart: always
    env_file:
      - .env
    volumes:
      - dati_automazioni_municipio:/home/node/.n8n
    ports:
      - "5678:5678"
    environment:
      - GENERIC_TIMEZONE=${TZ}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${UTENTE_ADMIN}
      - N8N_BASIC_AUTH_PASSWORD=${PASSWORD_ADMIN}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - WEBHOOK_URL=https://n8n.leonardobartoli.org/
      - N8N_PROTOCOL=https
    networks:
      - rete_municipio
    depends_on:
      - server-context-mcp

# =================================================================
# DATABASE E CACHE DATI
# =================================================================

  # Database Principale (Postgres)
  database-patrimonio:
    # ⚠️ Modifica per l'automazione SQL: usa build
    build: 
      context: ./db
      dockerfile: Dockerfile
    container_name: database_municipio
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=patrimonio_smart
      - POSTGRES_USER=${UTENTE_DB}
      - POSTGRES_PASSWORD=${PASSWORD_DB}
    volumes:
      - dati_database_municipio:/var/lib/postgresql/data
      # ⚠️ Rimosso: il mount manuale del singolo file SQL
    ports:
      - "5432:5432"
    networks:
      - rete_municipio

  # Cache e Code di Messaggi (Redis)
  cache-dati:
    image: redis:7-alpine
    container_name: cache_municipio
    restart: always
    env_file:
      - .env
    volumes:
      - dati_cache_municipio:/data
    ports:
      - "6379:6379"
    networks:
      - rete_municipio

# =================================================================
# ANALISI E VISUALIZZAZIONE
# =================================================================

  # Dashboard di Monitoraggio (Grafana)
  dashboard-report:
    image: grafana/grafana:latest
    container_name: dashboard_municipio
    restart: always
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_USER=${UTENTE_ADMIN}
      - GF_SECURITY_ADMIN_PASSWORD=${PASSWORD_ADMIN}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - dati_dashboard_municipio:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - rete_municipio

  # Database Metriche (InfluxDB)
  telemetria-sensori:
    image: influxdb:2.7
    container_name: metriche_municipio
    restart: always
    env_file:
      - .env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${UTENTE_ADMIN}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${PASSWORD_ADMIN}
      - DOCKER_INFLUXDB_INIT_ORG=GestioneComunale
      - DOCKER_INFLUXDB_INIT_BUCKET=sensori_patrimonio
    volumes:
      - dati_metriche_municipio:/var/lib/influxdb2
    ports:
      - "8086:8086"
    networks:
      - rete_municipio

# =================================================================
# ACCESSO SICURO E RETI ESTERNE
# =================================================================

  # Tunnel Cloudflare
  tunnel-accesso-remoto:
    image: cloudflare/cloudflared:latest
    container_name: tunnel_comunale
    restart: always
    env_file:
      - .env
    environment:
      - TUNNEL_TOKEN=${TOKEN_CLOUDFLARE}
    command: tunnel run
    networks:
      - rete_municipio
    depends_on:
      - piattaforma-iot
      - dashboard-report

  # ZeroTier (configurazione necessaria per accedere alla rete hardware remota)
  rete-infrastrutture-remote:
    image: zerotier/zerotier:latest
    container_name: rete_edifici_remoti
    restart: always
    env_file:
      - .env
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - ZEROTIER_NETWORK_ID=${RETE_ZEROTIER_ID}
    volumes:
      - dati_zerotier_municipio:/var/lib/zerotier-one
    network_mode: host
    privileged: true

# =================================================================
# VOLUMI PERSISTENTI
# =================================================================

volumes:
  dati_ai_municipio:
    driver: local
  dati_piattaforma:
    driver: local
  dati_automazioni_municipio:
    driver: local
  dati_database_municipio:
    driver: local
  dati_cache_municipio:
    driver: local
  dati_dashboard_municipio:
    driver: local
  dati_metriche_municipio:
    driver: local
  dati_zerotier_municipio:
    driver: local
  dati_mcp_contexto:
    driver: local
  dati_tts_cache: 
  dati_stt_cache: # Volume per la cache di Wyoming Whisper

# =================================================================
# RETE INTERNA DEL MUNICIPIO
# =================================================================

networks:
  rete_municipio:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16